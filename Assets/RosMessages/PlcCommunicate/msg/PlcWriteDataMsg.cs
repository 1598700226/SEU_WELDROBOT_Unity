//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.PlcCommunicate
{
    [Serializable]
    public class PlcWriteDataMsg : Message
    {
        public const string k_RosMessageName = "plc_communicate/PlcWriteData";
        public override string RosMessageName => k_RosMessageName;

        public bool plc_pulse;
        public bool plc_ready;
        public bool plc_automatic;
        public bool powdering;
        public bool laser_enable;
        public bool laser_reset;
        public bool laser_output;
        public bool open_instruction;
        public bool open_gas;
        public bool open_powder;
        public ushort current_power;
        public ushort current_speed;
        public ushort current_product;
        public ushort current_technology;

        public PlcWriteDataMsg()
        {
            this.plc_pulse = false;
            this.plc_ready = false;
            this.plc_automatic = false;
            this.powdering = false;
            this.laser_enable = false;
            this.laser_reset = false;
            this.laser_output = false;
            this.open_instruction = false;
            this.open_gas = false;
            this.open_powder = false;
            this.current_power = 0;
            this.current_speed = 0;
            this.current_product = 0;
            this.current_technology = 0;
        }

        public PlcWriteDataMsg(bool plc_pulse, bool plc_ready, bool plc_automatic, bool powdering, bool laser_enable, bool laser_reset, bool laser_output, bool open_instruction, bool open_gas, bool open_powder, ushort current_power, ushort current_speed, ushort current_product, ushort current_technology)
        {
            this.plc_pulse = plc_pulse;
            this.plc_ready = plc_ready;
            this.plc_automatic = plc_automatic;
            this.powdering = powdering;
            this.laser_enable = laser_enable;
            this.laser_reset = laser_reset;
            this.laser_output = laser_output;
            this.open_instruction = open_instruction;
            this.open_gas = open_gas;
            this.open_powder = open_powder;
            this.current_power = current_power;
            this.current_speed = current_speed;
            this.current_product = current_product;
            this.current_technology = current_technology;
        }

        public static PlcWriteDataMsg Deserialize(MessageDeserializer deserializer) => new PlcWriteDataMsg(deserializer);

        private PlcWriteDataMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.plc_pulse);
            deserializer.Read(out this.plc_ready);
            deserializer.Read(out this.plc_automatic);
            deserializer.Read(out this.powdering);
            deserializer.Read(out this.laser_enable);
            deserializer.Read(out this.laser_reset);
            deserializer.Read(out this.laser_output);
            deserializer.Read(out this.open_instruction);
            deserializer.Read(out this.open_gas);
            deserializer.Read(out this.open_powder);
            deserializer.Read(out this.current_power);
            deserializer.Read(out this.current_speed);
            deserializer.Read(out this.current_product);
            deserializer.Read(out this.current_technology);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.plc_pulse);
            serializer.Write(this.plc_ready);
            serializer.Write(this.plc_automatic);
            serializer.Write(this.powdering);
            serializer.Write(this.laser_enable);
            serializer.Write(this.laser_reset);
            serializer.Write(this.laser_output);
            serializer.Write(this.open_instruction);
            serializer.Write(this.open_gas);
            serializer.Write(this.open_powder);
            serializer.Write(this.current_power);
            serializer.Write(this.current_speed);
            serializer.Write(this.current_product);
            serializer.Write(this.current_technology);
        }

        public override string ToString()
        {
            return "PlcWriteDataMsg: " +
            "\nplc_pulse: " + plc_pulse.ToString() +
            "\nplc_ready: " + plc_ready.ToString() +
            "\nplc_automatic: " + plc_automatic.ToString() +
            "\npowdering: " + powdering.ToString() +
            "\nlaser_enable: " + laser_enable.ToString() +
            "\nlaser_reset: " + laser_reset.ToString() +
            "\nlaser_output: " + laser_output.ToString() +
            "\nopen_instruction: " + open_instruction.ToString() +
            "\nopen_gas: " + open_gas.ToString() +
            "\nopen_powder: " + open_powder.ToString() +
            "\ncurrent_power: " + current_power.ToString() +
            "\ncurrent_speed: " + current_speed.ToString() +
            "\ncurrent_product: " + current_product.ToString() +
            "\ncurrent_technology: " + current_technology.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
